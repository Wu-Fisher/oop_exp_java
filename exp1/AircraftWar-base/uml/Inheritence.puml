@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + FlyingObject(int locationX, int locationY, int speedX, int speedY):void
    + forward():void
    + crash(FlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# axHp:int
    # hp:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp):void
    + decreaseHp(int decrease):void
    + recoverHp(int recover):void
    + getHp():int
    + {abstract} shoot():List<Bullet>
 }

class AbstractBullet
{
    - power:int
    + Bullet(int locationX, int locationY, int speedX, int speedY, int power):void
    + forward():void
	+ getPower():int
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- AbstractBullet
AbstractFlyingObject <|-- AbstractProps

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- EliteEnemy
AbstractAircraft <|-- BossEnemy

AbstractBullet <|-- HeroBullet
AbstractBullet <|-- EnemyBullet
AbstractProps <|-- BloodProps
AbstractProps <|-- BulletProps
AbstractProps <|-- BombProps


class HeroAircraft {
    # axHp:int
    # hp:int
    - shootNum:int
    - power:int
    - direction:int
    - myHero:HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp):HeroAircraft
    - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp,int shootnum, int power):HeroAircraft
    + getInstance(int locationX, int locationY, int speedX, int speedY, int hp):HeroAircraft
    + getInstance(int locationX, int locationY, int speedX, int speedY, int hp,int shootnum, int power):HeroAircraft
    + forward():void
    + shoot():List<Bullet>
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp):void
    + forward():void
    + shoot():List<Bullet>
}

class EliteEnemy
{

    - direction:int
    - shootNum:int
    - power:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp):void
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int shootnum, int power):void
    + forward():void
    + shoot():List<Bullet>
}

class BossEnemy
{

    - direction:int
    - shootNum:int
    - power:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp):void
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp, int shootnum, int power):void
    + forward():void
    + shoot():List<Bullet>
}



class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power):void
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power):void
}

class AbstractProps{
    # hp:int
    + AbstractProps(int locationX, int locationY, int speedX, int speedY):void
    + getHp():int
    + setHp():void
    + forward():void
    +{abstract}effectCrash():void
}

class BloodProps
{
+ BloodProps(int locationX, int locationY, int speedX, int speedY):void
+ effectCrash():void
}

class BulletProps
{
+ BulletProps(int locationX, int locationY, int speedX, int speedY):void
+ effectCrash():void
}

class BombProps
{
+ BombProps(int locationX, int locationY, int speedX, int speedY):void
+ effectCrash():void
}




















@enduml